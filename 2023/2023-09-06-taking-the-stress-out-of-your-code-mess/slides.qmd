---
title: "Taking the stress out of your code mess"
subtitle: ""
author: "Rhian Davies | @statsRhian"
format:
  jrSlides-revealjs:
    self-contained: true
execute:
  echo: true
  eval: false
---

## About Me ðŸ‘‹

::: columns
::: {.column width="60%"}
-   Data Scientist at [Jumping Rivers](http://www.jumpingrivers.com/)
-   [RSS](https://rss.org.uk/) Statistical Ambassador

:::

::: {.column width="40%"}
![](images/r-book-small.png){fig-alt="Cartoon of a woman holding out a book"}
:::
:::

## About Jumping Rivers

::: columns
::: column
-   Data science & machine learning
-   Training courses
-   Dashboard development and deployment
-   Infrastructure
-   Managed Posit services
:::

::: column
![](images/office-small-tp.png){fig-alt="Cartoon of three people working at computers" fig-align="center"}
:::
:::

## I'm going to tell you a story {background-color="#5b868d"}

::: aside
Disclaimer: Solutions are not guaranteed to fix your problems. Batteries not included. Do not eat.
:::

## Meet Jane

::: columns
::: column
-   Environmental scientist
-   Specialises in carbon models
-   Comfortable using R in academic setting
:::

::: column
![](images/robot-science.jpg){fig-alt="A cartoon robot holding a testtube and wearing a lab coat"}
:::
:::

::: notes
1:1 bespoke support
:::

## Jane was frustrated

::: columns
::: column
-   Inherited a pile of messy R code
-   Responsible for getting it to work, fast
-   Very deeply nested
-   Matryoshka doll code
:::

::: column
![](https://www.jumpingrivers.com/blog/refactoring-russian-doll-code/featured.jpg "Russian Dolls"){alt="Seven, traditional wooden Russian Dolls doing from largest on the left, to smallest on the right."}
:::
:::

## The solution

::: columns
::: column
-   A series of 1:1 bespoke coding sessions
-   Unnesting the code, one doll at a time
:::

::: column
![](images/robot-science.jpg){fig-alt="A cartoon robot holding a testtube and wearing a lab coat"}
:::
:::


# The messy zone {background-color="#5b868d"}


## Tidy up bit-by-bit

:::: columns
::: column
How can we rewrite functions without breaking the code base?

1. Start with the inner functions
1. Re-write the main body
1. Clearly define the messy zones
:::

::: column
![](https://www.jumpingrivers.com/blog/refactoring-russian-doll-code/vacuum.png "Tidy your code"){alt="Jumping Rivers robot using a vacuum cleaner on a pile of code and text."}
:::
::::

::: notes
You know when you tidy your bedroom, you optimistically pull *everything* out onto the floor. A few hours later, the bed is covered and there are piles of clothes everywhere. There\'s no going back, and you aren't going to be able to sleep on your bed tonight unless you clean everything. (Just me?)
:::

## Messy zone example

```{r}
#| eval: false
example = function(arg1, arg2) {
  # Messy zone
  
  a_better_name = arg1$mess$ugh
  helpful_name = arg2$what$is$this
  
  # Refactor the internals
  
  useful_result = a_better_name + helpful_name
  sensible_name_tibble = a_better_name * helpful_name    
  
  # Messy Zone
  results$some$mess = useful_result
  results$another$naff$list = sensible_name_tibble
}
```

## Push the mess up

:::: columns
::: {.column width="75%"}

Once the inner functions are clean

1. List all the arguments of inners
1. List all the returns of the inner
1. Double check names
1. Clear the messy zone in one go
1. Move up one level
1. Repeat
:::

::: {.column width="25%"}
![](https://media.tenor.com/PzGKGLb54G8AAAAd/salt-n-pepa-push-it-real-good.gif){alt="Salt N Pepa"}

:::
::::

::: notes
Push it Salt'n'Pepper gif
:::

## Benefits

- Being explicit about where the mess is allowed us to focus on simplifying internals
- Higher level code functioned as expected
- Didn't have to commit to the structure of the function parameters upfront
- Clear markers of where we would need to tidy later

# Quick tips {background-color="#5b868d"}

## Start with a blank slate


:::: columns
::: column

- Avoid the temptation to copy-paste

- Can tie you to the old style
:::

::: column

![](images/engineer.jpg){alt="Cartoon of two engineers."}

:::
::::



## Take time to design

:::: columns
::: column

- One session we drew diagrams - no code

- The most valuable session

- We often referred back to the diagrams to remind ourselves of the design choices

- My favourite tools:
    - [Miro](miro.com)
    - [draw.io](draw.io)
    - [excalidraw](https://excalidraw.com/)
:::

::: column

![](images/artist.jpg){alt="Cartoon of artist next to an easel."}

:::
::::


## A good name goes a long way

- Just renaming arguments can make functions much clearer

```{r}
#| eval: false
defac = function(x) {
  as.numeric(as.character(x))
}
crm_summ = crimtab %>%
  as.data.frame() %>%
    mutate(
      fng = defac(Var1),
      ht = defac(Var2),
      n = Freq
    ) %>%
    select(fng, ht, n)
```



## A good name goes a long way

- Just renaming arguments can make functions much clearer

```{r}
#| eval: false
extract_numeric_from_level = function(x) {
  as.numeric(as.character(x))
}

criminal_summary = crimtab %>%
  as.data.frame() %>%
  mutate(
    finger_length = extract_numeric_from_level(Var1),
    height = extract_numeric_from_level(Var2),
    count = Freq
  ) %>%
  select(finger_length, height, count)
```


## Test regularly

:::: columns
::: column

- Things _will_ go wrong 

- You want to know as soon as possible

- Ensure that your code is always run-able

- Numerical results should be unaffected by the refactor

- Run unit tests with {testthat} and GitHub actions CI/CD
:::

::: column

![](images/computer-small.jpg){alt="Cartoon robot at a laptop."}

:::
::::

## Why rather than How

:::: columns
::: column

- Code was "How" programming

- We regrouped the functions based on the _science_ rather than the _programming_

- Changing focus made it much clearer to follow
:::

::: column

![](https://www.jumpingrivers.com/blog/refactoring-russian-doll-code/colab.jpg "Collaboration"){alt="Cartoon of  four people sat around a table, with laptops. One of them is pointing at a projector screen with the python logo on it."}

:::
::::

## Do it with a friend

:::: columns
::: column

- Refactoring can be daunting
- Hard to hold the overall design and small technical details simulatenously
- The person helping you doesnâ€™t have to understand the details
- You can learn from each other
- It's fun 
:::

::: column

![](images/community.jpg){alt="Cartoon of three people with speech bubbles."}

:::
::::

# Recap {background-color="#5b868d"}

::: notes
Refactoring code properly takes time, and sometimes it can be hard to justify the cost. However, poorly written code is difficult to develop, time consuming to maintain and tends to mask bugs which are hiding in the cobwebs of functions that no-one really understands any more.
:::

## Top tips

:::: columns
::: column

1. Define the messy zone

1. Push the mess up

1. Start with a blank slate

1. Take time to design

1. A good name goes a long way

1. Test regularly

1. Why rather than How

1. Do it with a friend
:::

::: column

![](images/clipboard.png){alt="Cartoon of robot with a clipboard."}

:::
::::



# Questions? {background-color="#5b868d"}

::: columns
::: {.column width="65%"}
<br>

{{< fa brands github >}} [StatsRhian](https://github.com/StatsRhian)

{{< fa briefcase >}} [jumpingrivers.com](https://www.jumpingrivers.com/)

{{< fa calendar >}} [shiny-in-production.jumpingrivers.com](https://shiny-in-production.jumpingrivers.com/)
:::

::: {.column width="35%"}
![](){fig-align="center" fig-alt="QR code"}
:::
:::


